{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\petve\\\\OneDrive\\\\Documentos\\\\MeusProjetos\\\\NLW\\\\mova-se\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport challenges from '../../challenges.json';\nexport var challengesContext = /*#__PURE__*/createContext({});\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/petve/OneDrive/Documentos/MeusProjetos/NLW/mova-se/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","challengesContext","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAGA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAaP,OAAO,IAAMI,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAE5CL,QAAQ,CAAC,CAAD,CAFoC;AAAA,MAE/DM,KAF+D;AAAA,MAExDC,QAFwD;;AAAA,mBAGpBP,QAAQ,CAAC,CAAD,CAHY;AAAA,MAG/DQ,iBAH+D;AAAA,MAG5CC,oBAH4C;;AAAA,mBAIhBT,QAAQ,CAAC,CAAD,CAJQ;AAAA,MAI/DU,mBAJ+D;AAAA,MAI1CC,sBAJ0C;;AAAA,mBAKxBX,QAAQ,CAAC,IAAD,CALgB;AAAA,MAK/DY,eAL+D;AAAA,MAK9CC,kBAL8C;;AAQtE,WAASC,OAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA6B;AACzB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBlB,UAAU,CAACmB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGpB,UAAU,CAACe,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AACD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHf,MAAAA,KAAK,EAALA,KADG;AAEHE,MAAAA,iBAAiB,EAAjBA,iBAFG;AAGHE,MAAAA,mBAAmB,EAAnBA,mBAHG;AAIHI,MAAAA,OAAO,EAAPA,OAJG;AAKHC,MAAAA,iBAAiB,EAAjBA,iBALG;AAMHH,MAAAA,eAAe,EAAfA;AANG,KADX;AAAA,cAUKP;AAVL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAhCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from \"react\";\r\nimport challenges from '../../challenges.json'\r\n\r\n\r\nexport const challengesContext = createContext({})\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    currentExperience: number;\r\n    challengesCompleted: number;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n}\r\ninterface ChallengesProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n    const [activeChallenge, setActiveChallenge] = useState(null)\r\n\r\n\r\n    function levelUp() {\r\n        setLevel(level + 1)\r\n    }\r\n\r\n    function startNewChallenge() {\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex]\r\n\r\n        setActiveChallenge(challenge)\r\n    }\r\n    return (\r\n        <ChallengesContext.Provider\r\n            value={{\r\n                level,\r\n                currentExperience,\r\n                challengesCompleted,\r\n                levelUp,\r\n                startNewChallenge,\r\n                activeChallenge\r\n            }}\r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}